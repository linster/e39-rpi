// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: PicoToPi.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ca.stefanm.e39.proto;

@kotlin.jvm.JvmName("-initializepicoToPi")
public inline fun picoToPi(block: ca.stefanm.e39.proto.PicoToPiKt.Dsl.() -> kotlin.Unit): PicoToPiOuterClass.PicoToPi =
  ca.stefanm.e39.proto.PicoToPiKt.Dsl._create(PicoToPiOuterClass.PicoToPi.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ca.stefanm.e39.proto.PicoToPi`
 */
public object PicoToPiKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: PicoToPiOuterClass.PicoToPi.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: PicoToPiOuterClass.PicoToPi.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): PicoToPiOuterClass.PicoToPi = _builder.build()

    /**
     * `.ca.stefanm.e39.proto.PicoToPi.MessageType messageType = 1;`
     */
    public var messageType: PicoToPiOuterClass.PicoToPi.MessageType
      @JvmName("getMessageType")
      get() = _builder.getMessageType()
      @JvmName("setMessageType")
      set(value) {
        _builder.setMessageType(value)
      }
    public var messageTypeValue: kotlin.Int
      @JvmName("getMessageTypeValue")
      get() = _builder.getMessageTypeValue()
      @JvmName("setMessageTypeValue")
      set(value) {
        _builder.setMessageTypeValue(value)
      }
    /**
     * `.ca.stefanm.e39.proto.PicoToPi.MessageType messageType = 1;`
     */
    public fun clearMessageType() {
      _builder.clearMessageType()
    }

    /**
     * `optional .ca.stefanm.e39.proto.ConfigProto existingConfig = 2;`
     */
    public var existingConfig: ConfigProtoOuterClass.ConfigProto
      @JvmName("getExistingConfig")
      get() = _builder.getExistingConfig()
      @JvmName("setExistingConfig")
      set(value) {
        _builder.setExistingConfig(value)
      }
    /**
     * `optional .ca.stefanm.e39.proto.ConfigProto existingConfig = 2;`
     */
    public fun clearExistingConfig() {
      _builder.clearExistingConfig()
    }
    /**
     * `optional .ca.stefanm.e39.proto.ConfigProto existingConfig = 2;`
     * @return Whether the existingConfig field is set.
     */
    public fun hasExistingConfig(): kotlin.Boolean {
      return _builder.hasExistingConfig()
    }
    public val PicoToPiKt.Dsl.existingConfigOrNull: ConfigProtoOuterClass.ConfigProto?
      get() = _builder.existingConfigOrNull

    /**
     * `optional string loggerStatement = 3;`
     */
    public var loggerStatement: kotlin.String
      @JvmName("getLoggerStatement")
      get() = _builder.getLoggerStatement()
      @JvmName("setLoggerStatement")
      set(value) {
        _builder.setLoggerStatement(value)
      }
    /**
     * `optional string loggerStatement = 3;`
     */
    public fun clearLoggerStatement() {
      _builder.clearLoggerStatement()
    }
    /**
     * `optional string loggerStatement = 3;`
     * @return Whether the loggerStatement field is set.
     */
    public fun hasLoggerStatement(): kotlin.Boolean {
      return _builder.hasLoggerStatement()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun PicoToPiOuterClass.PicoToPi.copy(block: ca.stefanm.e39.proto.PicoToPiKt.Dsl.() -> kotlin.Unit): PicoToPiOuterClass.PicoToPi =
  ca.stefanm.e39.proto.PicoToPiKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val PicoToPiOuterClass.PicoToPiOrBuilder.existingConfigOrNull: ConfigProtoOuterClass.ConfigProto?
  get() = if (hasExistingConfig()) getExistingConfig() else null

